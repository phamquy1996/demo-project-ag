prepareData: function (data) {
        // Thêm các trường dữ liệu bổ sung vào FormData
        data.append('userId', '12345'); // Ví dụ: thêm userId
        data.append('description', 'Hình ảnh tải lên từ Jodit Editor'); // Thêm mô tả
        // Bạn có thể thêm nhiều trường hơn nếu cần
        return data;
      },
      defaultHandlerSuccess: function (response) {
        // Xử lý phản hồi thành công
        return response.url; // Trả về URL của hình ảnh đã tải lên
      },
      defaultHandlerError: function (response) {
        // Xử lý lỗi
        alert('Upload hình ảnh thất bại');
      }
filesVariableName: 'buffer', 

const handlePaste = (event: ClipboardEvent) => {
    const clipboardData = event.clipboardData;
    const items = clipboardData?.items;

    if (items) {
        for (let i = 0; i < items.length; i++) {
            if (items[i].type.indexOf('image') === 0) {
                const file = items[i].getAsFile();
                const reader = new FileReader();

                reader.onload = (e) => {
                    const base64Image = e.target?.result as string;
                    setContent((prevContent) => prevContent + `<img src="${base64Image}" alt="Pasted Image"/>`);
                };

                if (file) {
                    reader.readAsDataURL(file);
                }
            }
        }
    }
};

// Add the paste handler to the JoditEditor configuration
const config = {
    events: {
        beforePaste: handlePaste,
    },
};
events: {
        paste: e => {
            const newContent = e.target.innerHTML.replace(/(^|;)\s*font-[^;]+/g,""); // remove font-family...
            e.value = newContent;
            e.target.value = newContent;
            e.target.innerHTML = newContent;
            return e;
        }
    },

minHeight: 400,
	maxHeight: -1,
	defaultActionOnPaste: 'insert_as_html',
	defaultActionOnPasteFromWord: 'insert_as_html',
	askBeforePasteFromWord: false,
	askBeforePasteHTML: false,

events: {
                  processPaste: function(event, html){
                      jodit_editor.selection.insertHTML(html);
                      jodit_editor.tempContent = jodit_editor.getEditorValue();
                  },
                  afterPaste: function(event){
                      let el = $('<div></div>');
                      el.html(jodit_editor.tempContent ? jodit_editor.tempContent : jodit_editor.getEditorValue());
                      jodit_editor.setEditorValue(el.html());
                      jodit_editor.tempContent = null;
                  },
              },


events: {
    processPaste: function(event, html){
        // Kiểm tra nếu nội dung dán chứa ảnh
        const clipboardData = (event.originalEvent || event).clipboardData;
        if (clipboardData && clipboardData.items) {
            const items = clipboardData.items;
            for (let i = 0; i < items.length; i++) {
                if (items[i].type.indexOf('image') !== -1) {
                    const blob = items[i].getAsFile();
                    const formData = new FormData();
                    formData.append('upload', blob);

                    // Gửi ảnh lên server
                    fetch('/upload_image', {
                        method: 'POST',
                        body: formData
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.filelink) {
                            // Chèn ảnh vào editor
                            this.selection.insertImage(data.filelink);
                        }
                    })
                    .catch(error => {
                        console.error('Error uploading image:', error);
                    });
                }
            }
        }

        // Tiếp tục chèn HTML đã dán
        this.selection.insertHTML(html);
        this.tempContent = this.getEditorValue();
    },
    afterPaste: function(event){
        let el = $('<div></div>');
        el.html(this.tempContent ? this.tempContent : this.getEditorValue());
        this.setEditorValue(el.html());
        this.tempContent = null;
    },
},


import React, { useRef, useEffect } from 'react';
import JoditEditor from 'jodit-react';
import Jodit from 'jodit';
import 'jodit/build/jodit.min.css';

const JoditCustomEditor = () => {
  const editor = useRef(null);

  useEffect(() => {
    // 1. Define the Dummy module
    Jodit.modules.Dummy = function (editorInstance) {
      this.insertDummyImage = function (w, h, textcolor, bgcolor) {
        const src = `http://dummyimage.com/${w}x${h}/${textcolor || '000'}/${bgcolor || 'fff'}`;
        const image = editorInstance.createInside.element('img');
        image.setAttribute('src', src);
        editorInstance.selection.insertNode(image);
        editorInstance.setEditorValue(); // Synchronize value between textarea and editor
      };
    };

    // 2. Register the Dummy plugin
    Jodit.plugins.add('dummy', function (editorInstance) {
      // Initialize the Dummy module
      editorInstance.dummy = new Jodit.modules.Dummy(editorInstance);
    });

    // 3. Define the custom button in Jodit's controls
    Jodit.defaultOptions.controls.dummy = {
      // You can use an icon image by providing the URL
      // iconURL: 'path/to/your/dummy-icon.png',

      // Or use text instead of an icon
      text: 'Dummy',

      // Tooltip for the button
      tooltip: 'Insert Dummy Image',

      // Execution function when the button is clicked
      exec: function (editorInstance) {
        // Parameters for the dummy image
        const width = 100;
        const height = 100;
        const textColor = 'f00'; // Red text
        const bgColor = '000';    // Black background

        // Insert the dummy image using the Dummy module
        editorInstance.dummy.insertDummyImage(width, height, textColor, bgColor);
      },
    };
  }, []);

  // 4. Configure Jodit editor options
  const config = {
    readonly: false, // Set to true to make the editor read-only
    toolbarSticky: false,
    buttons: [
      'bold',
      'italic',
      'underline',
      'strikethrough',
      '|', // Separator
      'unorderedList',
      'orderedList',
      '|',
      'link',
      'image',
      'video',
      '|',
      'undo',
      'redo',
      '|',
      'dummy', // Your custom Dummy button
    ],
    // You can add more configurations here as needed
  };

  return (
    <div>
      <h2>Jodit Editor with Custom Dummy Button</h2>
      <JoditEditor
        ref={editor}
        value={''} // Initial content of the editor
        config={config}
        tabIndex={1} // Tab index of the textarea
        onBlur={(newContent) => {
          // Handle onBlur event if needed
          console.log('Editor content on blur:', newContent);
        }}
        onChange={(newContent) => {
          // Handle onChange event if needed
          console.log('Editor content changed:', newContent);
        }}
      />
    </div>
  );
};

export default JoditCustomEditor;
